<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.api.member.MemberMapper">
    <select id="findByEmail" resultType="com.example.api.member.MemberDTO" parameterType="string">
        SELECT member_id,
               nickname,
               profile_image_url,
               email,
               name,
               status,
               oauth_server_id,
               oauth_server,
               created_date,
               updated_date
        FROM member
        WHERE email = #{email};
    </select>

    <select id="findByOauthId" resultType="com.example.api.member.MemberDTO"
            parameterType="com.example.core.oauth.domain.OauthId">
        SELECT member_id,
               nickname,
               profile_image_url,
               email,
               name,
               status,
               oauth_server_id,
               oauth_server,
               created_date,
               updated_date
        FROM member
        WHERE oauth_server_id = #{oauthServerId}
          AND oauth_server = #{oauthServerType};
    </select>

    <select id="save">
        INSERT INTO member(nickname, profile_image_url, email, name, status, oauth_server_id, oauth_server)
        VALUES (#{nickname},
                #{profileImageUrl},
                #{email},
                #{name},
                #{status},
                #{oauthServerId},
                #{oauthServer})
    </select>

    <select id="deleteAll">
        DELETE
        FROM member;
    </select>

    <select id="findById" resultType="com.example.api.member.MemberDTO">
        SELECT *
        FROM member
        WHERE member_id = #{memberId}
    </select>

    <update id="updateMember" parameterType="com.example.api.member.dto.UpdateMemberDTO">
        UPDATE member
        SET nickname          = #{nickname},
            profile_image_url = #{profileImageUrl}
        WHERE member_id = #{memberId};
    </update>

    <resultMap id="myMainRes" type="com.example.api.member.dto.MyMainRes">
        <result property="nickname" column="nickname"/>
        <result property="profileImageUrl" column="profile_image_url"/>
        <result property="name" column="name"/>
        <result property="status" column="status"/>
        <collection property="savedRestaurants" ofType="com.example.api.savedrestaurant.SavedRestaurantDTO">
            <id property="memberId" column="sr_member_id"/>
            <id property="restaurantId" column="sr_restaurant_id"/>
            <result property="createdDate" column="SAVED_RESTAURANT_CREATED_DATE"/>
            <result property="updatedDate" column="SAVED_RESTAURANT_UPDATED_DATE"/>
        </collection>
        <collection property="reviews" ofType="com.example.api.review.dto.ReviewDTO">
            <id property="reviewId" column="review_id"/>
            <result property="memberId" column="revi_member_id"/>
            <result property="restaurantId" column="revi_restaurant_id"/>
            <result property="reservationId" column="revi_reservation_id"/>
            <result property="rate" column="rate"/>
            <result property="comment" column="comment"/>
            <result property="createdDate" column="REVIEW_CREATED_DATE"/>
            <result property="updatedDate" column="REVIEW_UPDATED_DATE"/>
            <collection property="images" ofType="com.example.api.review.dto.ReviewImageDTO">
                <result property="reviewImageId" column="REVIEW_IMAGE_ID"/>
                <result property="path" column="PATH"/>
            </collection>
        </collection>
    </resultMap>

    <select id="findMyMainById" resultMap="myMainRes">
        SELECT mem.nickname,
               mem.profile_image_url,
               mem.name,
               mem.status,
               sr.member_id        AS sr_member_id,
               sr.restaurant_id    AS sr_restaurant_id,
               sr.CREATED_DATE     AS SAVED_RESTAURANT_CREATED_DATE,
               sr.UPDATED_DATE     AS SAVED_RESTAURANT_UPDATED_DATE,
               revi.review_id,
               revi.member_id      AS revi_member_id,
               revi.restaurant_id  AS revi_restaurant_id,
               revi.reservation_id AS revi_reservation_id,
               revi.rate,
               revi.comment,
               revi.CREATED_DATE   AS REVIEW_CREATED_DATE,
               revi.UPDATED_DATE   AS REVIEW_UPDATED_DATE,
               ri.REVIEW_IMAGE_ID,
               ri.PATH
        FROM member AS mem
                 LEFT OUTER JOIN saved_restaurant AS sr
                                 ON sr.member_id = mem.member_id
                 LEFT OUTER JOIN review AS revi ON revi.member_id = mem.member_id
                 LEFT OUTER JOIN review_image ri ON ri.REVIEW_ID = revi.REVIEW_ID
        WHERE mem.member_id = #{memberId}
        ORDER BY sr.CREATED_DATE DESC, revi.CREATED_DATE DESC, ri.REVIEW_IMAGE_ID ASC;
    </select>
</mapper>