<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.api.review.ReviewMapper">

    <resultMap id="review" type="com.example.api.review.dto.ReviewDTO">
        <id property="reviewId" column="REVIEW_ID"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="restaurantId" column="RESTAURANT_ID"/>
        <result property="reservationId" column="RESERVATION_ID"/>
        <result property="rate" column="RATE"/>
        <result property="comment" column="COMMENT"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
    </resultMap>

    <resultMap id="reviewAndComment" type="com.example.api.review.dto.GetReviewCommentRes">
        <id property="reviewId" column="REVIEW_ID"/>
        <result property="nickname" column="NICKNAME"/>
        <result property="imagePath" column="PROFILE_IMAGE_URL"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="rate" column="RATE"/>
        <result property="reviewContent" column="REVIEW_CONTENT"/>
        <result property="reviewCreatedDate" column="REVIEW_CREATED_DATE"/>
        <result property="reviewUpdatedDate" column="REVIEW_UPDATED_DATE"/>

        <result property="commentId" column="COMMENT_ID"/>
        <result property="commentContent" column="COMMENT_CONTENT"/>
        <result property="commentCreatedDate" column="COMMENT_CREATED_DATE"/>
        <result property="commentUpdatedDate" column="COMMENT_UPDATED_DATE"/>

        <collection property="images" ofType="com.example.api.review.dto.ReviewImageDTO">
            <result property="reviewImageId" column="REVIEW_IMAGE_ID"/>
            <result property="path" column="PATH"/>
        </collection>
    </resultMap>

    <resultMap id="reviewAndImage" type="com.example.api.review.dto.GetReviewRes">
        <id property="reviewId" column="REVIEW_ID"/>
        <result property="restaurantId" column="RESTAURANT_ID"/>
        <result property="reservationId" column="RESERVATION_ID"/>
        <result property="name" column="NAME"/>
        <result property="restaurantImage" column="RESTAURANT_IMAGE"/>
        <result property="category" column="CATEGORY"/>
        <result property="address" column="ADDRESS"/>
        <result property="rate" column="RATE"/>
        <result property="comment" column="COMMENT"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <collection property="images" ofType="com.example.api.review.dto.ReviewImageDTO">
            <result property="reviewImageId" column="REVIEW_IMAGE_ID"/>
            <result property="path" column="PATH"/>
        </collection>
    </resultMap>

    <select id="isExist" parameterType="long" resultType="boolean">
        SELECT EXISTS(SELECT 1
                      FROM review
                      WHERE RESTAURANT_ID = #{reservationId})
    </select>

    <insert id="createReview" parameterType="com.example.api.review.dto.ReviewDTO" useGeneratedKeys="true" keyProperty="reviewId">
        INSERT INTO review(member_id, restaurant_id, reservation_id, rate, comment)
        VALUES (#{memberId}, #{restaurantId},
                #{reservationId}, #{rate}, #{comment})
    </insert>

    <select id="getReview" parameterType="long" resultMap="review">
        SELECT r.REVIEW_ID, r.MEMBER_ID, r.RESTAURANT_ID, r.RESERVATION_ID, r.RATE, r.COMMENT, r.CREATED_DATE, r.UPDATED_DATE
        FROM review r
        WHERE r.review_id = #{reviewId}
    </select>

    <!--<select id="getReviewCommentPage" resultMap="reviewAndComment" parameterType="map">
        SELECT m.NICKNAME,
               m.PROFILE_IMAGE_URL,
               r.REVIEW_ID,
               r.MEMBER_ID,
               r.RATE,
               r.COMMENT,
               r.CREATED_DATE AS REVIEW_CREATED_DATE,
               r.UPDATED_DATE AS REVIEW_UPDATED_DATE,
               ri.REVIEW_IMAGE_ID,
               ri.PATH,
               c.COMMENT_ID,
               c.CONTENT,
               c.CREATED_DATE AS COMMENT_CREATED_DATE,
               c.UPDATED_DATE AS COMMENT_UPDATED_DATE
        FROM (SELECT *
              FROM review
              WHERE RESTAURANT_ID = #{restaurantId}
              ORDER BY CREATED_DATE DESC
              LIMIT #{pageable.offset}, #{pageable.pageSize}) r
        LEFT JOIN member m ON m.MEMBER_ID = r.MEMBER_ID
        LEFT JOIN review_image ri ON ri.REVIEW_ID = r.REVIEW_ID
        LEFT JOIN comment c ON c.REVIEW_ID = r.REVIEW_ID
    </select>-->

    <select id="getReviewComments" resultMap="reviewAndComment" parameterType="long">
        SELECT m.NICKNAME,
               m.PROFILE_IMAGE_URL,
               r.REVIEW_ID,
               r.MEMBER_ID,
               r.RATE,
               r.COMMENT AS REVIEW_CONTENT,
               r.CREATED_DATE AS REVIEW_CREATED_DATE,
               r.UPDATED_DATE AS REVIEW_UPDATED_DATE,
               ri.REVIEW_IMAGE_ID,
               ri.PATH,
               c.COMMENT_ID,
               c.CONTENT AS COMMENT_CONTENT,
               c.CREATED_DATE AS COMMENT_CREATED_DATE,
               c.UPDATED_DATE AS COMMENT_UPDATED_DATE
        FROM review r
        LEFT JOIN member m ON m.MEMBER_ID = r.MEMBER_ID
        LEFT JOIN review_image ri ON ri.REVIEW_ID = r.REVIEW_ID
        LEFT JOIN comment c ON c.REVIEW_ID = r.REVIEW_ID
        WHERE r.restaurant_id = #{restaurantId}
    </select>

    <select id="getReviewByMember" parameterType="long" resultMap="reviewAndImage">
        SELECT r.REVIEW_ID, r.RESTAURANT_ID, r.RESERVATION_ID,
               rt.NAME, rti.path as RESTAURANT_IMAGE, rt.CATEGORY, rt.ADDRESS,
               r.RATE, r.COMMENT, r.CREATED_DATE, r.UPDATED_DATE,
               ri.REVIEW_IMAGE_ID, ri.PATH
        FROM review r
                LEFT JOIN review_image ri on ri.REVIEW_ID = r.REVIEW_ID
                LEFT JOIN restaurant rt on rt.RESTAURANT_ID = r.RESTAURANT_ID
                LEFT JOIN restaurant_image rti on rti.RESTAURANT_ID = r.RESTAURANT_ID and rti.type = 'REPRESENTATIVE'
        WHERE r.MEMBER_ID = #{memberId}
        ORDER BY r.CREATED_DATE DESC
    </select>

    <select id="getReviewCount" parameterType="long" resultType="long">
        SELECT COUNT(*)
        FROM review
        where RESTAURANT_ID = #{restaurantId}
    </select>

    <update id="updateReview" parameterType="com.example.api.review.dto.ReviewDTO">
        UPDATE review
        SET rate = #{rate},
            comment = #{comment}
        WHERE review_id = #{reviewId};
    </update>

    <delete id="deleteReview">
        DELETE
        FROM review
        WHERE review_id = #{reviewId}
    </delete>

</mapper>