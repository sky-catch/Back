<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.api.restaurant.RestaurantMapper">

    <update id="increaseReviewCountAndRate" parameterType="com.example.api.review.dto.ReviewDTO">
        update restaurant
        set review_count = review_count + 1,
            review_avg   = ((review_count - 1) * review_avg + #{rate}) / review_count
        where restaurant_id = #{restaurantId}
    </update>

    <update id="decreaseReviewCountAndRate" parameterType="com.example.api.review.dto.ReviewDTO">
        update restaurant
        set review_count =
                case
                    when review_count >= 1 then review_count - 1
                    else 0 end,
            review_avg   =
                case
                    when review_count >= 1 then ((review_count + 1) * review_avg - #{rate}) / review_count
                    else 0 end
        where restaurant_id = #{restaurantId};
    </update>

    <insert id="save" parameterType="com.example.api.restaurant.dto.RestaurantDTO" useGeneratedKeys="true"
            keyProperty="restaurantId">
        INSERT INTO restaurant(owner_id, name, category, content, phone, table_person_max, table_person_min, open_time,
                               last_order_time, close_time, address, detail_address, lunch_price, dinner_price,
                               saved_count, review_count, review_avg)
        VALUES (#{ownerId}, #{name}, #{category}, #{content}, #{phone}, #{tablePersonMax}, #{tablePersonMin},
                #{openTime}, #{lastOrderTime}, #{closeTime}, #{address}, #{detailAddress}, #{lunchPrice},
                #{dinnerPrice}, 0, 0, 0);
    </insert>

    <delete id="deleteAll">
        DELETE
        FROM restaurant;
    </delete>

    <select id="findAll" resultType="com.example.api.restaurant.dto.RestaurantDTO">
        SELECT *
        FROM restaurant;
    </select>

    <select id="findById" resultType="com.example.api.restaurant.dto.RestaurantDTO">
        SELECT *
        FROM restaurant
        where restaurant_id = #{restaurantId};
    </select>

    <resultMap id="restaurant" type="com.example.api.restaurant.dto.GetRestaurantRes">
        <id property="restaurantId" column="restaurant_id"/>
        <id property="ownerId" column="owner_id"/>
        <id property="name" column="name"/>
        <id property="category" column="category"/>
        <id property="content" column="content"/>
        <id property="phone" column="phone"/>
        <id property="tablePersonMax" column="table_person_max"/>
        <id property="tablePersonMin" column="table_person_min"/>
        <id property="openTime" column="open_time"/>
        <id property="lastOrderTime" column="last_order_time"/>
        <id property="closeTime" column="close_time"/>
        <id property="address" column="address"/>
        <id property="detailAddress" column="detail_address"/>
        <id property="lunchPrice" column="lunch_price"/>
        <id property="dinnerPrice" column="dinner_price"/>
        <id property="savedCount" column="saved_count"/>
        <id property="reviewCount" column="review_count"/>
        <id property="reviewAvg" column="review_avg"/>
        <id property="createdDate" column="created_date"/>
        <id property="updatedDate" column="updated_date"/>
        <collection property="images" ofType="com.example.api.restaurant.dto.GetRestaurantImageRes">
            <id property="restaurantImageId" column="restaurant_image_id"/>
            <id property="path" column="path"/>
            <id property="type" column="type"/>
        </collection>
        <collection property="notifications"
                    ofType="com.example.api.restaurantnotification.dto.GetRestaurantNotificationRes">
            <id property="notificationId" column="notification_id"/>
            <id property="title" column="title"/>
            <id property="content" column="notification_content"/>
            <id property="startDate" column="start_date"/>
            <id property="endDate" column="end_date"/>
        </collection>
        <collection property="facilities" ofType="com.example.api.facility.dto.GetFacilityRes">
            <result property="name" column="facility_name"/>
            <result property="path" column="facility_path"/>
        </collection>
    </resultMap>

    <select id="findRestaurantInfoById" resultMap="restaurant">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date,
               resi.restaurant_image_id,
               resi.path,
               resi.type,
               resn.notification_id,
               resn.title,
               resn.content as notification_content,
               resn.start_date,
               resn.end_date,
               fc.name      as facility_name,
               fc.path      as facility_path
        FROM restaurant res
                 LEFT OUTER JOIN restaurant_image resi ON resi.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN restaurant_notification resn ON resn.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN store_facility sfc on sfc.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN facility fc on fc.facility_id = sfc.facility_id
        WHERE res.restaurant_id = #{restaurantId}
        ORDER BY resi.type DESC, resi.restaurant_id ASC, resn.start_date DESC;
    </select>

    <select id="isAlreadyCreated" parameterType="long" resultType="boolean">
        SELECT EXISTS (SELECT * FROM restaurant res WHERE res.owner_id = #{ownerId})
    </select>

    <select id="isAlreadyExistsName" parameterType="String" resultType="boolean">
        SELECT EXISTS (SELECT * FROM restaurant res WHERE res.name = #{name});
    </select>

    <select id="findRestaurantInfoByName" resultMap="restaurant">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date,
               resi.restaurant_image_id,
               resi.path,
               resi.type,
               resn.notification_id,
               resn.title,
               resn.content as notification_content,
               resn.start_date,
               resn.end_date,
               fc.name      as facility_name,
               fc.path      as facility_path
        FROM restaurant res
                 LEFT OUTER JOIN restaurant_image resi ON resi.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN restaurant_notification resn ON resn.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN store_facility sfc on sfc.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN facility fc on fc.facility_id = sfc.facility_id
        WHERE res.name = #{name}
        ORDER BY resi.type DESC, resi.restaurant_id ASC, resn.start_date DESC;
    </select>

    <resultMap id="restaurantWithHolidayAndAvailableDate"
               type="com.example.api.restaurant.dto.RestaurantWithHolidayAndAvailableDateDTO">
        <id property="restaurantId" column="restaurant_id"/>
        <id property="ownerId" column="owner_id"/>
        <id property="name" column="name"/>
        <id property="category" column="category"/>
        <id property="content" column="content"/>
        <id property="phone" column="phone"/>
        <id property="tablePersonMax" column="table_person_max"/>
        <id property="tablePersonMin" column="table_person_min"/>
        <id property="openTime" column="open_time"/>
        <id property="lastOrderTime" column="last_order_time"/>
        <id property="closeTime" column="close_time"/>
        <id property="address" column="address"/>
        <id property="detailAddress" column="detail_address"/>
        <id property="lunchPrice" column="lunch_price"/>
        <id property="dinnerPrice" column="dinner_price"/>
        <id property="savedCount" column="saved_count"/>
        <id property="reviewCount" column="review_count"/>
        <id property="reviewAvg" column="review_avg"/>
        <id property="createdDate" column="created_date"/>
        <id property="updatedDate" column="updated_date"/>
        <association property="availableDate"
                     javaType="com.example.api.reservationavailabledate.ReservationAvailableDateDTO">
            <result property="reservationAvailableDateId" column="reservation_available_date_id"/>
            <result property="restaurantId" column="restaurant_id"/>
            <result property="beginDate" column="begin_date"/>
            <result property="endDate" column="end_date"/>
        </association>
        <collection property="holidays" ofType="com.example.api.holiday.HolidayDTO">
            <id property="holidayId" column="holiday_id"/>
            <id property="restaurantId" column="restaurant_id"/>
            <id property="day" column="day"/>
        </collection>
    </resultMap>

    <select id="findRestaurantWithHolidayAndAvailableDateById" resultMap="restaurantWithHolidayAndAvailableDate">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date,
               rad.reservation_available_date_id,
               rad.restaurant_id,
               rad.begin_date,
               rad.end_date,
               h.holiday_id,
               h.restaurant_id,
               h.day
        FROM restaurant res
                 LEFT OUTER JOIN holiday h ON h.restaurant_id = res.restaurant_id
                 INNER JOIN reservation_available_date as rad ON rad.restaurant_id = res.restaurant_id
        WHERE res.restaurant_id = #{restaurantId};
    </select>
</mapper>
