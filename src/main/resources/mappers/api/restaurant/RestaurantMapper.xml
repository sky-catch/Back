<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.api.restaurant.RestaurantMapper">

    <update id="increaseReviewCountAndRate" parameterType="com.example.api.review.dto.ReviewDTO">
        update restaurant
        set review_count = review_count + 1,
            review_avg   = ((review_count - 1) * review_avg + #{rate}) / review_count
        where restaurant_id = #{restaurantId}
    </update>

    <update id="decreaseReviewCountAndRate" parameterType="com.example.api.review.dto.ReviewDTO">
        update restaurant
        set review_count =
                case
                    when review_count >= 1 then review_count - 1
                    else 0 end,
            review_avg   =
                case
                    when review_count >= 1 then ((review_count + 1) * review_avg - #{rate}) / review_count
                    else 0 end
        where restaurant_id = #{restaurantId};
    </update>

    <insert id="save" parameterType="com.example.api.restaurant.dto.RestaurantDTO" useGeneratedKeys="true"
            keyProperty="restaurantId">
        INSERT INTO restaurant(owner_id, name, category, content, phone, table_person_max, table_person_min, open_time,
                               last_order_time, close_time, address, detail_address, hot_place, lat, lng, lunch_price,
                               dinner_price, saved_count, review_count, review_avg)
        VALUES (#{ownerId}, #{name}, #{category}, #{content}, #{phone}, #{tablePersonMax}, #{tablePersonMin},
                #{openTime}, #{lastOrderTime}, #{closeTime}, #{address}, #{detailAddress}, #{hotPlace}, #{lat}, #{lng},
                #{lunchPrice}, #{dinnerPrice}, 0, 0, 0);
    </insert>

    <update id="updateRestaurant" parameterType="com.example.api.restaurant.dto.RestaurantDTO">
        UPDATE restaurant
        SET name             = #{name},
            category         = #{category},
            content          = #{content},
            phone            = #{phone},
            table_person_max = #{tablePersonMax},
            table_person_min = #{tablePersonMin},
            open_time        = #{openTime},
            last_order_time  = #{lastOrderTime},
            close_time       = #{closeTime},
            address          = #{address},
            hot_place        = #{hotPlace},
            detail_address   = #{detailAddress},
            lat              = #{lat},
            lng              = #{lng},
            lunch_price      = #{lunchPrice},
            dinner_price     = #{dinnerPrice}
        WHERE owner_id = #{ownerId};
    </update>

    <select id="findById" resultType="com.example.api.restaurant.dto.RestaurantDTO">
        SELECT *
        FROM restaurant
        where restaurant_id = #{restaurantId};
    </select>

    <resultMap id="restaurantInfo" type="com.example.api.restaurant.dto.GetRestaurantInfoRes">
        <id property="restaurantId" column="restaurant_id"/>
        <id property="ownerId" column="owner_id"/>
        <id property="name" column="name"/>
        <id property="category" column="category"/>
        <id property="content" column="content"/>
        <id property="phone" column="phone"/>
        <id property="tablePersonMax" column="table_person_max"/>
        <id property="tablePersonMin" column="table_person_min"/>
        <id property="openTime" column="open_time"/>
        <id property="lastOrderTime" column="last_order_time"/>
        <id property="closeTime" column="close_time"/>
        <id property="address" column="address"/>
        <id property="detailAddress" column="detail_address"/>
        <id property="lat" column="lat" javaType="java.math.BigDecimal"/>
        <id property="lng" column="lng" javaType="java.math.BigDecimal"/>
        <id property="lunchPrice" column="lunch_price"/>
        <id property="dinnerPrice" column="dinner_price"/>
        <id property="savedCount" column="saved_count"/>
        <id property="reviewCount" column="review_count"/>
        <id property="reviewAvg" column="review_avg"/>
        <id property="isSaved" column="is_saved"/>
        <id property="createdDate" column="created_date"/>
        <id property="updatedDate" column="updated_date"/>
        <collection property="images" ofType="com.example.api.restaurant.dto.GetRestaurantImageRes">
            <id property="restaurantImageId" column="restaurant_image_id"/>
            <id property="path" column="path"/>
            <id property="type" column="type"/>
        </collection>
        <collection property="notifications"
                    ofType="com.example.api.restaurantnotification.dto.GetRestaurantNotificationRes">
            <id property="notificationId" column="notification_id"/>
            <id property="title" column="title"/>
            <id property="content" column="notification_content"/>
            <id property="startDate" column="start_date"/>
            <id property="endDate" column="end_date"/>
        </collection>
        <collection property="facilities" ofType="com.example.api.facility.dto.GetFacilityRes">
            <result property="name" column="facility_name"/>
            <result property="path" column="facility_path"/>
        </collection>
    </resultMap>

    <select id="findRestaurantInfoById" resultMap="restaurantInfo">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lat,
               res.lng,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date,
               resi.restaurant_image_id,
               resi.path,
               resi.type,
               resn.notification_id,
               resn.title,
               resn.content as notification_content,
               resn.start_date,
               resn.end_date,
               fc.name      as facility_name,
               fc.path      as facility_path
        FROM restaurant res
                 LEFT OUTER JOIN restaurant_image resi ON resi.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN restaurant_notification resn ON resn.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN store_facility sfc on sfc.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN facility fc on fc.facility_id = sfc.facility_id
        WHERE res.restaurant_id = #{restaurantId}
        ORDER BY resi.type DESC, resi.restaurant_id ASC, resn.start_date DESC;
    </select>

    <select id="isAlreadyCreated" parameterType="long" resultType="boolean">
        SELECT EXISTS (SELECT * FROM restaurant res WHERE res.owner_id = #{ownerId})
    </select>

    <select id="isAlreadyExistsName" parameterType="String" resultType="boolean">
        SELECT EXISTS (SELECT * FROM restaurant res WHERE res.name = #{name});
    </select>

    <select id="isAlreadyExistsNameExcludeSelf" resultType="boolean">
        SELECT EXISTS (SELECT * FROM restaurant res WHERE res.name = #{name} and res.owner_id != #{ownerId});
    </select>

    <select id="findRestaurantInfoByName" resultMap="restaurantInfo">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lat,
               res.lng,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date,
               resi.restaurant_image_id,
               resi.path,
               resi.type,
               resn.notification_id,
               resn.title,
               resn.content                                        as notification_content,
               resn.start_date,
               resn.end_date,
               fc.name                                             as facility_name,
               fc.path                                             as facility_path,
               EXISTS (SELECT *
                       FROM saved_restaurant sr
                       WHERE sr.member_id = #{memberId}
                         and sr.restaurant_id = res.restaurant_id) as is_saved
        FROM restaurant res
                 LEFT OUTER JOIN restaurant_image resi ON resi.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN restaurant_notification resn ON resn.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN store_facility sfc on sfc.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN facility fc on fc.facility_id = sfc.facility_id
        WHERE res.name = #{name}
        ORDER BY resi.type DESC, resi.restaurant_id ASC, resn.start_date DESC;
    </select>

    <resultMap id="restaurantWithHolidayAndAvailableDate"
               type="com.example.api.restaurant.dto.RestaurantWithHolidayAndAvailableDateDTO">
        <id property="restaurantId" column="restaurant_id"/>
        <id property="ownerId" column="owner_id"/>
        <id property="name" column="name"/>
        <id property="category" column="category"/>
        <id property="content" column="content"/>
        <id property="phone" column="phone"/>
        <id property="tablePersonMax" column="table_person_max"/>
        <id property="tablePersonMin" column="table_person_min"/>
        <id property="openTime" column="open_time"/>
        <id property="lastOrderTime" column="last_order_time"/>
        <id property="closeTime" column="close_time"/>
        <id property="address" column="address"/>
        <id property="detailAddress" column="detail_address"/>
        <id property="lat" column="lat" javaType="java.math.BigDecimal"/>
        <id property="lng" column="lng" javaType="java.math.BigDecimal"/>
        <id property="lunchPrice" column="lunch_price"/>
        <id property="dinnerPrice" column="dinner_price"/>
        <id property="savedCount" column="saved_count"/>
        <id property="reviewCount" column="review_count"/>
        <id property="reviewAvg" column="review_avg"/>
        <id property="createdDate" column="created_date"/>
        <id property="updatedDate" column="updated_date"/>
        <association property="availableDate"
                     javaType="com.example.api.reservationavailabledate.ReservationAvailableDateDTO">
            <result property="reservationAvailableDateId" column="reservation_available_date_id"/>
            <result property="restaurantId" column="restaurant_id"/>
            <result property="beginDate" column="begin_date"/>
            <result property="endDate" column="end_date"/>
        </association>
        <collection property="holidays" ofType="com.example.api.holiday.HolidayDTO">
            <id property="holidayId" column="holiday_id"/>
            <id property="restaurantId" column="restaurant_id"/>
            <id property="day" column="day"/>
        </collection>
    </resultMap>

    <select id="findRestaurantWithHolidayAndAvailableDateById" resultMap="restaurantWithHolidayAndAvailableDate">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lat,
               res.lng,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date,
               rad.reservation_available_date_id,
               rad.restaurant_id,
               rad.begin_date,
               rad.end_date,
               h.holiday_id,
               h.restaurant_id,
               h.day
        FROM restaurant res
                 LEFT OUTER JOIN holiday h ON h.restaurant_id = res.restaurant_id
                 INNER JOIN reservation_available_date as rad ON rad.restaurant_id = res.restaurant_id
        WHERE res.restaurant_id = #{restaurantId};
    </select>

    <select id="findRestaurantInfoByOwnerId" resultMap="restaurantInfo">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lat,
               res.lng,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date,
               resi.restaurant_image_id,
               resi.path,
               resi.type,
               resn.notification_id,
               resn.title,
               resn.content as notification_content,
               resn.start_date,
               resn.end_date,
               fc.name      as facility_name,
               fc.path      as facility_path
        FROM restaurant res
                 LEFT OUTER JOIN restaurant_image resi ON resi.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN restaurant_notification resn ON resn.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN store_facility sfc on sfc.restaurant_id = res.restaurant_id
                 LEFT OUTER JOIN facility fc on fc.facility_id = sfc.facility_id
        WHERE res.owner_id = #{ownerId}
        ORDER BY resi.type DESC, resi.restaurant_id ASC, resn.start_date DESC;
    </select>

    <select id="findByOwnerId" resultType="com.example.api.restaurant.dto.RestaurantDTO">
        SELECT res.restaurant_id,
               res.owner_id,
               res.name,
               res.category,
               res.content,
               res.phone,
               res.table_person_max,
               res.table_person_min,
               res.open_time,
               res.last_order_time,
               res.close_time,
               res.address,
               res.detail_address,
               res.lat,
               res.lng,
               res.lunch_price,
               res.dinner_price,
               res.saved_count,
               res.review_count,
               res.review_avg,
               res.created_date,
               res.updated_date
        FROM restaurant res
        WHERE res.owner_id = #{ownerId}
    </select>

    <update id="increaseSavedCount" parameterType="com.example.api.restaurant.dto.RestaurantDTO">
        UPDATE RESTAURANT
        SET SAVED_COUNT = SAVED_COUNT + 1
        WHERE RESTAURANT_ID = #{restaurantId};
    </update>

    <update id="decreaseSavedCount" parameterType="com.example.api.restaurant.dto.RestaurantDTO">
        UPDATE RESTAURANT
        SET SAVED_COUNT =
                CASE
                    WHEN SAVED_COUNT >= 1 THEN SAVED_COUNT - 1
                    ELSE 0 END
        WHERE RESTAURANT_ID = #{restaurantId};
    </update>

    <!--    for test -->
    <select id="findAll" resultType="com.example.api.restaurant.dto.RestaurantDTO">
        SELECT *
        FROM restaurant;
    </select>

    <select id="getCountByAddress" resultType="int">
        select count(*)
        from restaurant
        where address = #{koreanCity}
    </select>

    <select id="getCountByCategory" resultType="int">
        select count(*)
        from restaurant
        where category = #{category}
    </select>

    <select id="getCountByHotPlace" resultType="int">
        select count(*)
        from restaurant
        where hot_place = #{hotPlace}
    </select>

    <select id="searchNameByKeyword" resultType="com.example.api.restaurant.dto.search.RestaurantSummaryDTO">
        select r.restaurant_id, r.name, ri.path as imageUrl, CONCAT(r.address, ' ', r.detail_address) as full_address
        from restaurant r
                 left join restaurant_image ri on ri.restaurant_id = r.restaurant_id and ri.type = 'REPRESENTATIVE'
        where r.name like CONCAT('%', #{keyword}, '%')
    </select>

    <resultMap id="getRestaurantSearchList" type="com.example.api.restaurant.dto.search.GetRestaurantSearchListRes">
        <id property="restaurantId" column="restaurant_id"/>
        <result property="imageUrl" column="path"/>
        <result property="name" column="name"/>
        <result property="content" column="content"/>
        <result property="reviewAvg" column="review_avg"/>
        <result property="reviewCount" column="review_count"/>
        <result property="category" column="category"/>
        <result property="koreanCity" column="address"/>
        <result property="lunchPrice" column="lunch_price"/>
        <result property="dinnerPrice" column="dinner_price"/>
        <result property="savedRestaurant" column="saved_restaurant"/>
        <result property="lastOrderTime" column="last_order_time"/>
        <collection property="alreadyReservationTime" ofType="String">
            <result column="already_reservation_time"/>
        </collection>
    </resultMap>

    <select id="searchByFilter" resultMap="getRestaurantSearchList"
            parameterType="com.example.api.restaurant.dto.search.SearchFilter">
        select r.restaurant_id, ri.path, r.name, r.content, r.review_avg, r.review_count,
        r.category, r.address, r.lunch_price, r.dinner_price, r.last_order_time,
        if(sr.member_id > 0, true, false) as saved_restaurant, time(rs.time) as already_reservation_time
        from restaurant r
        left join restaurant_image ri on ri.restaurant_id = r.restaurant_id and ri.type = 'REPRESENTATIVE'
        left join reservation_available_date rad on rad.restaurant_id = r.restaurant_id
        left join holiday h on h.restaurant_id = r.restaurant_id and h.day = DATE_FORMAT(#{filter.date}, '%W')
        left join reservation rs ON rs.restaurant_id = r.restaurant_id and cast(rs.TIME as DATE) = #{filter.date} and
        cast(rs.TIME as TIME) >= #{filter.time} and rs.status != 'CANCEL'
        left join saved_restaurant sr on sr.restaurant_id = r.restaurant_id and sr.member_id = #{filter.memberId}
        where rad.begin_date &lt;= #{filter.date} and rad.end_date >= #{filter.date}
        and r.open_time &lt;= #{filter.time} and r.last_order_time >= #{filter.time}
        and h.day is null

        <if test="filter.koreanCity != null">
            and r.address = #{filter.koreanCity.koreanName}
        </if>
        <if test="list != null">
            and r.hot_place in
            <foreach collection="list" item="item" separator="," open="(" close=")">
                #{item.koreanName}
            </foreach>
        </if>
        <if test="filter.category != null">
            and r.category = #{filter.category.koreanName}
        </if>
        <if test="filter.personCount != 0">
            and r.table_person_max >= #{filter.personCount} and r.table_person_min &lt;= #{filter.personCount}
        </if>
        <if test="filter.maxPrice != 0">
            and r.lunch_price &lt;= #{filter.maxPrice} and r.dinner_price &lt;= #{filter.maxPrice}
        </if>
        <if test="filter.minPrice != 0">
            and r.lunch_price >= #{filter.minPrice} and r.dinner_price >= #{filter.minPrice}
        </if>
        <choose>
            <when test="filter.orderType.toString() == 'RatingOrder'">
                order by r.review_avg desc
            </when>
            <when test="filter.orderType.toString() == 'LowPriceOrder'">
                order by r.dinner_price asc
            </when>
            <when test="filter.orderType.toString() == 'HighPriceOrder'">
                order by r.dinner_price desc
            </when>
            <otherwise>
                order by r.restaurant_id asc
            </otherwise>
        </choose>

    </select>

</mapper>
